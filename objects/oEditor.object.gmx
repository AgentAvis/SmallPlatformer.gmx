<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSlideyWallBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xpos = view_xview[0]
ypos = view_yview[0]
xlen = view_wview[0]
ylen = view_hview[0]
canplace = false      //can i place blocks, or is the player hovering over the tile menu
sel = false           //what kindof block is selected (if any?)
block = false         //what block are we placing
col1 = false          //is the player hovering over the first button
col2 = false          //is the player hovering over the second button
SpawnPointcol = false //is the player spawn point placer thing selected ?
col3 = false          //is the player hovering over the spikes button
savebutt = false      //is the save button collideing with the mouse
loadbutt = false      //is the load button collideing with the mouse

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rEditor {
image_xscale = 1
image_yscale = 1

var block;
//if sel = oWallSelect { block = oWall }
//if sel = oWall2Select { block = oWall2 }
//if sel = oPlayerSpawnPointSelect { block = oPlayerSpawnPoint }

if col1 and mouse_check_button_pressed(mb_left) {
    sel = oWallSelect
}
if col2 and mouse_check_button_pressed(mb_left) {
    sel = oWall2Select
    block = oWall2
}
if SpawnPointcol and mouse_check_button_pressed(mb_left) {
    sel = oPlayerSpawnPointSelect
    block = oPlayerSpawnPoint
}
if col3 and mouse_check_button_pressed(mb_left) {
    sel = oSpikesSelect
    block = oSpikes
}

switch sel {
    
    case oWallSelect:
        block = oWall
    ;break;
    
    case oWall2Select:
        block = oWall2
    ;break;
    
    case oPlayerSpawnPointSelect:
        block = oPlayerSpawnPoint
    ;break;
    
    case oSpikesSelect:
        block = oSpikes
    ;break;
    
}

//turn off autotileing
if (sel != false) or (!mouse_check_button(mb_left) and !mouse_check_button(mb_left)) {
    //global.tile = false
    with (oBlock) { tile = false }
}

//placeing of blocks!!
if sel != false and canplace{
    if mouse_check_button(mb_left) { 
        with (oBlock) { if distance_to_point(mouse_x,mouse_y) &lt; 24 { tile = true } }
        if !place_meeting(GridSnap(mouse_x,8),GridSnap(mouse_y,8),oBlock) {
            instance_create(GridSnap(mouse_x,8),GridSnap(mouse_y,8),block)
        }   
    }
    //removal of blocks!!
    if mouse_check_button(mb_right) {
        with (oBlock) { if distance_to_point(mouse_x,mouse_y) &lt; 24 { tile = true } }   
        //block to delete
        killme = instance_place(GridSnap(mouse_x,8),GridSnap(mouse_y,8),oBlock)
        
        if instance_exists(killme) {
            with(killme) { instance_destroy() }
        }
        
    }
    
}

if keyboard_check_pressed(vk_escape) { sel = false }

//saving
if savebutt and mouse_check_button_pressed(mb_left) {
    ScSave()
}
/*
if savebutt and mouse_check_button_pressed(mb_left) {
    num = instance_number(oBlock)
    popup = get_string("Name the level","ChangeMe")
    if popup != "" { //if the player didn't cancel, move on
        ini_open(popup+".ini")
        ini_write_real("Blocknum","Num",num) //how many blocks are there?
        while (num &gt; 0) {
            Bee = instance_nth_nearest(0,0,oBlock,num)
            ini_write_real("Block"+string(num), "x_pos", Bee.x)
            ini_write_real("Block"+string(num), "y_pos", Bee.y) 
            ini_write_real("Block"+string(num), "index", Bee.object_index) 
            num --;
        }
        ini_write_real("Player", "x_pos", oPlayerSpawnPoint.x)
        ini_write_real("Player", "y_pos", oPlayerSpawnPoint.y) 
        
        ini_close()
        }
}
*/

//loading

if loadbutt and mouse_check_button_pressed(mb_left) {
ScLoad()
/*
    with (oBlock) { instance_destroy() }
    with (oPlayerSpawnPoint) { instance_destroy() }
    global.tile = true
    file = get_open_filename_ext("*.ini","","C:\Users\ASUS1\AppData\Local\SmallPlatformer","Choose a level to edit")
    if file != "" { //if the player didn't cancel, move on
        ini_open(file)
        Num = ini_read_real("Blocknum","Num",0)
        while Num &gt; 0 {
            var x_pos = ini_read_real("Block"+string(Num),"x_pos",-1)
            var y_pos = ini_read_real("Block"+string(Num),"y_pos",-1) 
            var index = ini_read_real("Block"+string(Num),"index",-1) 
            instance_create(x_pos,y_pos,index)
            
            Num --;
        }
        var px = ini_read_real("Player","x_pos",-1)
        var py = ini_read_real("Player","y_pos",-1) 
        instance_create(px,py,oPlayerSpawnPoint)
        ini_close()
    }
*/
}














}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rEditor {
xpos   = view_xview[0]
ypos   = view_yview[0]
xlen   = view_wview[0]
ylen   = view_hview[0]

//draw the backround for the editor
    draw_set_colour(c_dkgray);
    draw_set_alpha(0.85);
    draw_rectangle(xpos,ypos,xpos+64,ypos+ylen-1,false)
    draw_set_alpha(1);

//title
    draw_set_font(Font0)
    draw_set_halign( fa_center )
    draw_text_outlined(xpos + 32,ypos,"Block Pallet",c_white,c_black)
//if i'm hovering over the first block make it react :finebro:
    if col1 {
        draw_sprite_ext(sBrickTile ,0,xpos+16,ypos+25,2.25,2.25,0,c_white,1)
    } else {
        draw_sprite_ext(sBrickTile ,0,xpos+16,ypos+25,2,2,0,c_white,1)
    }
//if i'm hovering over the second block make it react :finebro:
    if col2 {
        draw_sprite_ext(sSlideyWall ,0,xpos+48,ypos+25,2.25,2.25,0,c_white,1)
    } else {
        draw_sprite_ext(sSlideyWall ,0,xpos+48,ypos+25,2,2,0,c_white,1)
    }
//if i'm hovering over the spawn point placer make it react :finebro:
    if SpawnPointcol {
        draw_sprite_ext(spr_player_idle ,0,xpos+16,ypos+64,2.25,2.25,0,c_white,1)
    } else {
        draw_sprite_ext(spr_player_idle ,0,xpos+16,ypos+64,2,2,0,c_white,1)
    }
//if i'm hovering over the spike block make it react :finebro:
    if col3 {
        draw_sprite_ext(sSpikesEditor ,0,xpos+48,ypos+25+32,2.25,2.25,0,c_white,1)
    } else {
        draw_sprite_ext(sSpikesEditor ,0,xpos+48,ypos+25+32,2,2,0,c_white,1)
    }    
//if i'm hovering over the save button make it react :finebro:
draw_set_halign(fa_center)
        //draw_sprite_ext(sSaveMask,0,oSaveButton.x+xpos,oSaveButton.y+ypos,2,2,0,1,1)
    if savebutt {
        draw_text_outlined(oSaveButton.x+xpos,oSaveButton.y+ypos,"Save Level",c_green,c_white)
    } else {
        draw_text_outlined(oSaveButton.x+xpos,oSaveButton.y+ypos,"Save Level",c_green,c_black)
    }       
//if i'm hovering over the load button make it react :finebro:
draw_set_halign(fa_center)
        //draw_sprite_ext(sSaveMask,0,oLoadButton.x+xpos,oLoadButton.y+ypos,2,2,0,1,1)
    if loadbutt {
        draw_text_outlined(oLoadButton.x+xpos,oLoadButton.y+ypos,"Load Level",c_green,c_white)
    } else {
        draw_text_outlined(oLoadButton.x+xpos,oLoadButton.y+ypos,"Load Level",c_green,c_black)
    }    
    
//SpawnPointcol = false
if sel = oWallSelect {
    draw_sprite(sWallTile,0,GridSnap(mouse_x,8),GridSnap(mouse_y,8))
}
if sel = oWall2Select {
    draw_sprite(sSlideyWallBase,0,GridSnap(mouse_x,8),GridSnap(mouse_y,8))
    draw_sprite(sOutline1,0,GridSnap(mouse_x,8),GridSnap(mouse_y,8))
}
if sel = oSpikesSelect {
    draw_sprite(sSpikes,0,GridSnap(mouse_x,8),GridSnap(mouse_y,8))
    //draw_sprite(sOutline1,0,GridSnap(mouse_x,8),GridSnap(mouse_y,8))
}







}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
