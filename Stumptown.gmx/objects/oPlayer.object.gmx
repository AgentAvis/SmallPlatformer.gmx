<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerScaled</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Variables
//tweakables
with (oPlayer) { Speed = 2 * g JumpSpeed = 2.75 * g }
global.Grav = .13 * g
HP = 2
jumps = 20
imspeed = .15
image_speed = imspeed * global.time

sprite_index2 = sNothing
image_speed2 = .2
image_index2 = 0

//init
ojumps = jumps //trash this is trash
vsp = 0 //custon vspeed
hsp = 0 //custom hspeed
App = false //used for slo-mo basically
app = 0 //timerr used to count if its time for me to do things
vtimerr = 0 //timerr untill i can vomit
percent = 0 //percent of vomit i have in my gut
lastside = 0 //last side i slid on, should be disabled
num = 0 //used for animating the SECOND drawn sprite

//audio
playLandSound = false;
timeBetweenFootsteps = 14;
footstepTimer = timeBetweenFootsteps;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///this collision code works

ScTime()

//cheats
if global.debug {
    
    if keyboard_check_pressed(ord('T')){ x = mouse_x y = mouse_y }
    
}

//make sure no cheating happens
if percent &gt; 1 { percent = 1 }

//movementinputs
up = keyboard_check_pressed(ord('W')) + keyboard_check_pressed(vk_space)
left = keyboard_check(ord('A'))
right = keyboard_check(ord('D'))
down = keyboard_check(ord('S'))
//vomiting inputs
vomup = keyboard_check(vk_up)
vomleft = keyboard_check(vk_left)
vomright = keyboard_check(vk_right)
vomdown = keyboard_check(vk_down)

if App { //App basically says "if time was normal and the code would be running right now"
    if (vomup or vomleft or vomright or vomdown) and percent &gt; 0 {
        
        percent -= .005;
        
        var cusdir;
        if vomright { cusdir = 0   }
        if vomup    { cusdir = 90  }
        if vomleft  { cusdir = 180 }
        if vomdown  { cusdir = 270 }
        
            
        //knockback
        motion_add_cus(global.Grav * .75,cusdir+180)
        
        //spawn the vomit particles
        repeat(ceil(random_range(2,5))) {
                with (instance_create(x,y,oBlood)) {
                    var blspd, bldir;
                    bldir = cusdir + random_range(-4,4)
                    blspd = random_range(4,6)*3
                    motion_set_cus(blspd,bldir)
        //hsp = lengthdir_x(blspd,bldir)
        //vsp = lengthdir_y(blspd,bldir)
        //image_blend = make_colour_rgb(random_range(90,120),random_range(151,255),79) //181
                    image_blend = make_colour_rgb(random_range(100,130),random_range(156,196),random_range(200,255)) //181
                    image_alpha = random_range(.6,1.5)
                    if image_alpha &gt; 1 { image_alpha = 1 }
                }
        }
        vtimerr = 0 //used to see if we can kill spare vomit
    } else {
        //kill spare vomit
        vtimerr ++;
        if vtimerr &gt; room_speed * 10 { with (oBlood) { instance_destroy() } vtimerr = 0 }
    }
}

            //autojump when you land on something
            /*
            Stomp = collision_rectangle(x-5,y+1,x+3,y+5,oStompable,true,true)
            if instance_exists(Stomp) and vsp &gt; 0
            {
                with (Stomp) { HP -= 1 }
                vsp = -JumpSpeed 
            }
            */
   //Gravity yo
   if place_meeting(x,y+2,0) { vsp = 0 } else { vsp += global.Grav * global.time }
   
   //Walking and shit
   if !(right and left) {
       if right { if hsp &lt; Speed { hsp += (Speed * .2) * global.time } }
       if left { if hsp &gt; -Speed { hsp -= (Speed * .2) * global.time } }
   }
//this makes sure everything works the same even if time is slowed
if App {    
    //drag
    if !left and !right {
        if place_meeting(x,y+2,oSolid) {
            hsp = hsp * .6
        } else {
            hsp = hsp *.95
        }
    }
}

if !collision_line(x-1,y+4,x-1,y+8,oSolid,true,true) and !down {
    //wall sliding
    
    slide1 = instance_place(x+2,y,oSolid)
    slide2 = instance_place(x-2,y,oSolid)
     
    if instance_exists(slide1) {//and sign(vsp) != 1 {
        if up and vsp != 0 and slide1.object_index != oWall2 {
            vsp = -JumpSpeed
            jumps -= 1
            hsp = -Speed * 2
            audio_play_sound(aPlayerJump1, 1, false);
            lastside = 0
            vsp = vsp * .91
        }
    //lastside = 0
    //vsp = vsp * .91
    }
    if instance_exists(slide2) {//and sign(vsp) != 1 {
        if up and vsp != 0 and slide2.object_index != oWall2 {
            vsp = -JumpSpeed
            jumps -= 1
            hsp = Speed * 1.5
            audio_play_sound(aPlayerJump1, 1, false);
            lastside = 0
            vsp = vsp * .91
        }
    //lastside = 1
    //vsp = vsp * .91
    }
}

//jumping
if up and place_meeting(x,y + 2,oSolid) {
    vsp = -JumpSpeed
    jumps -= 1
    ///Sound test purposes
    audio_play_sound(aPlayerJump1, 1, false);
}

//terminal velocity(s)  (These prevent things from getting too crazy)
if abs(hsp) &gt; 4 * g { hsp = sign(hsp) * 4 * g }
if abs(vsp) &gt; 6 * g { vsp = sign(vsp) * 6 * g }

//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!
//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!    

    // Collisions
//Horizontal collisions
if (vsp == 0) // "Stick" player to ground on shallow downward slopes
{
    yplus = 0;
    while (!place_meeting(x,y+yplus+1,oSolid) &amp;&amp; yplus &lt;= abs(.5*hsp)) yplus +=1;
    if place_meeting(x,y+yplus+1,oSolid)
    {
        y += yplus;
    }
}
if (place_meeting(x+hsp, y, oSolid)) {
    
    yplus = 0;
    while (place_meeting(x+hsp,y-yplus,oSolid) and yplus &lt;= abs(1 * hsp)) { yplus ++ }
    if place_meeting(x+hsp,y-yplus,oSolid) {  
        
        while (!place_meeting(x+sign(hsp),y,oSolid)){ x += sign(hsp);}
        hsp = 0;
    } else {
    y-= yplus;
    if yplus &gt; 2 { hsp *= .75 }
    }
}
x += hsp * global.time;

if (place_meeting(x, y+vsp, oSolid)) {
    while (!place_meeting(x,y+sign(vsp),oSolid)){
        y += sign(vsp);
        playLandSound = true;
    }
    vsp = 0;
    if(playLandSound)
    {
        //audio_play_sound(sPlayer_land1, 1, false); //ground landing sound [ben]
        playLandSound = false;
    }
}
y += vsp * global.time;

//animation stuff
image_speed = imspeed * global.time

//point me the right direction!
if sign(hsp) != 0 and (right or left) { image_xscale = sign(hsp) }

if hsp &gt; .2 or hsp &lt; -.2
{
    if vsp == 0 //and sprite_index != spr_player_death {
    {
        sprite_index = sPlayerRun
    }
} else {
    if vsp == 0 //and sprite_index != spr_player_death
    {
    sprite_index = sPlayerIdle
    }
}
if vsp &lt; 0
{
    sprite_index = sPlayerUp
}
if vsp &gt; 0 
{
    sprite_index = sPlayerDown
}

//health stuff
var spike;
spike = instance_place(x,y,oSpikes)
if instance_exists(spike) { if spike.state != false { HP -= 1 } }

if HP &lt;= 0 {
    audio_play_sound(aPlayerDeath1, 1, false);
    repeat(200) {
        with (instance_create(x,y,oBlood)) {
            s = true
            dir = random(360)
            spd = random(5)
            hsp = lengthdir_x(spd,dir)
            vsp = lengthdir_y(spd,dir)
            image_blend = make_colour_rgb(random_range(151,255),80,79) //181
            image_alpha = random_range(.6,1.5)
            if image_alpha &gt; 1 { image_alpha = 1 }
        }
    }
    instance_create(x - 180, y - 125, oDeathText)
    instance_destroy()
}

//Audio Stuff
if(oDj.playFootsteps == true &amp;&amp; sprite_index == sPlayerRun)
{
    footstepTimer--;
    if(footstepTimer &lt; 0)
    {
        footstepTimer = timeBetweenFootsteps;
        audio_play_sound(aPlayerFootStep1, 1, false);
    }
}
else
{
    footstepTimer = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moved to oDJ's draw GUI
/*
//draw the blank bar
rmh = view_hview[0] * 3.2
rmw = view_wview[0] * 3
draw_set_colour(c_black);
draw_rectangle(0,rmh,rmw,rmh-16,false)
//draw the fullness bar
//calculate length of it
length = percent * rmw
draw_set_colour(c_green);
draw_rectangle(0,rmh,0+length,rmh-16,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

//draw the base sprite and animation (image_index, sprite_index,etc)
//draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
//draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*4,image_yscale*4,image_angle,image_blend,image_alpha)



if global.debug {

    draw_sprite_ext(sPlayerMask,0,x,y,1,1,0,c_white,1)

    draw_line(x-1,y+4,x-1,y+8)
    
    draw_set_colour(c_aqua);
    //vv true center of player
    draw_circle(x-1,y-1,2,true)
    //Bounding box of player
    draw_rectangle(x+3,y+4,x-5,y-6,true)
    
    draw_set_colour(c_orange);
    //stomping on things mask
    draw_rectangle(x-5,y+1,x+3,y+5,true)
}   

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
