<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-32</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init
global.debug = false
Sw = true
global.Controls = true
tilerr = 0 //used to turn off autotileing to save on performance
//tweakables

globalvar purple;
purple = make_color_rgb(116,82,116)

globalvar blue;
blue = c_blue //just used so i can reference color variables for vomit easily
globalvar yellow;
yellow = c_yellow
globalvar green;
green = c_green

global.time = 1

global.Grav = 0.15

//BloodSurface
surf = surface_create(room_width,room_height)

//Just adding some test sound
//audio_play_sound(sMusic_theme1, 1, true);
global.tile = false//true

//if random(room_speed) &lt; 1 { global.tile = true }
//global.tile = true


rmcheck = 0 //counts down time to check if the room changed
oroom = room //last room we were in
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rInit { room_goto_next() }

if keyboard_check_pressed(ord('R')) and room != rEditor { room_restart() ScClear() Sw = true }
 
if keyboard_check_pressed(ord('K')) { global.debug = !global.debug }

if keyboard_check_pressed(ord('P')) { if room_exists(room_next(room)) {ScClear() room_goto_next()} Sw = true }

if keyboard_check_pressed(ord('O')) { if room_exists(room_previous(room)) {ScClear() room_goto_previous()} Sw = true }

if keyboard_check_pressed(ord('C')) {
    surface_set_target(surf);
    draw_clear_alpha(c_white,0);
    surface_reset_target();   
}
//tileing
rmcheck ++;
if rmcheck &gt;= 16 {
oroom = room
rmcheck = 0
}
if oroom != room {
    //if running { crash = true }
    global.tile = true
} else {
    //if running { crash = true }
    if random(60) &lt; 1 { global.tile = false }
}

//if global.tile {
//tilerr++;
//if tilerr &gt; 5 { global.tile = false tilerr = 0 } 
//}
//global.tile = false




if keyboard_check_pressed(ord('U')) { global.time = get_integer("Set timescale(TIME-SLOWING IS CURRENTLY BROKEN) ",1) }

//if keyboard_check_pressed(ord('J')) { global.Controls = !global.Controls Sw = true } //this is trash

//if Sw {
//    if global.Controls {
//        with (oPlayer) { Speed = 2 JumpSpeed = 5.5 }
//        global.Grav = .4
//    } else {
//        with (oPlayer) { Speed = 2 JumpSpeed = 4 }
//        global.Grav = .15
//    }
//    Sw = false
//}


//camera stuff

if room = rEditor {

view_xview[0] = floor(oCam.x - view_wview/2)
view_yview[0] = floor(oCam.y - view_hview/2)

}

if room != rMenu and room != rChooseSave {
    if instance_exists(oPlayer) {
        view_xview[0] = floor(oPlayer.x - view_wview/2)
        view_yview[0] = floor(oPlayer.y - view_hview/2)
        var s = 1; //s = movement scale
    
        //background_x[4] += oPlayer.hsp / (s)
        //background_y[4] += oPlayer.vsp / (s)
        
        background_x[3] += oPlayer.hsp / (s*2) //smallest stars
        background_y[3] += oPlayer.vsp / (s*2)
        
        background_x[2] += oPlayer.hsp / (s*4) //second biggest
        background_y[2] += oPlayer.vsp / (s*4)
        
        background_x[1] += oPlayer.hsp / (s*48) //biggest stars
        background_y[1] += oPlayer.vsp / (s*48)
        
        background_x[0] += oPlayer.hsp / (1) //backround
        background_y[0] += oPlayer.vsp / (1)
    } else if instance_exists(oCam) {
    var s = 1; //s = movement scale
    
        //background_x[4] += oPlayer.hsp / (s)
        //background_y[4] += oPlayer.vsp / (s)
        
        background_x[3] += oCam.hsp / (s*2) //smallest stars
        background_y[3] += oCam.vsp / (s*2)
        
        background_x[2] += oCam.hsp / (s*4) //second biggest
        background_y[2] += oCam.vsp / (s*4)
        
        background_x[1] += oCam.hsp / (s*48) //biggest stars
        background_y[1] += oCam.vsp / (s*48)
        
        background_x[0] += oCam.hsp / (1) //backround
        background_y[0] += oCam.vsp / (1)
    }
} else {

var s = 1; //s = movement scale
var m = .25;
    
        //background_x[4] += oPlayer.hsp / (s)
        //background_y[4] += oPlayer.vsp / (s)
        
        background_x[3] -= m / (s*48) //smallest stars
        //background_y[3] += 3 / (s*48)
        
        background_x[2] -= m / (s*4) //second biggest
        //background_y[2] += 3 / (s*4)
        
        background_x[1] -= m / (s*2) //biggest stars
        //background_y[1] += 3 / (s*2)
        
        background_x[0] -= m / (1) //backround
        //background_y[0] += 3 / (1)


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all game gui
if instance_exists(oPlayer) {
    
    //draw the blank bar
    rmh = view_hview[0] * 3.2
    rmw = view_wview[0] * 3
    if oPlayer.percent != 0 {
        draw_set_colour(c_black);
        draw_rectangle(0,rmh,rmw,rmh-16,false)
        //draw the fullness bar
        //calculate length of it
        length = oPlayer.percent * rmw
        draw_set_colour(c_green);
        draw_rectangle(0,rmh,0+length,rmh-16,false)
    }

    
    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//debug stuff
if global.debug {
    draw_text(room_width / 2,room_height / 2,string(global.Controls))
}

// Draw blood surface

if (surface_exists(surf)) {
    draw_surface(surf, 0, 0)
} else {

// Create new surface if DX destroys old surface due to port resize

surf = surface_create(room_width, room_height);

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
