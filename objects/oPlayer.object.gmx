<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayer_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tweakables
with (oPlayer) { Speed = 2 JumpSpeed = 2.75 }
global.Grav = .15
HP = 2
jumps = 20
image_speed = 0.2

//init
ojumps = jumps
vsp = 0
hsp = 0
App = false
app = 0
vtimerr = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///this collision code works

ScTime()

//inputs
up = keyboard_check_pressed(ord('W')) + keyboard_check_pressed(vk_space)
left = keyboard_check(ord('A'))
right = keyboard_check(ord('D'))
//vomiting

vomup = keyboard_check(vk_up)
vomleft = keyboard_check(vk_left)
vomright = keyboard_check(vk_right)
vomdown = keyboard_check(vk_down)

if vomup or vomleft or vomright or vomdown {

var cusdir;
if vomup    { cusdir = 90  }
if vomdown  { cusdir = 270 }
if vomright { cusdir = 0   }
if vomleft  { cusdir = 180 }

//if mouse_check_button(mb_left) and App {
    
    //knockback yo
    //motion_add_cus(global.Grav * .75,point_direction(x,y,mouse_x,mouse_y)+180)
    motion_add_cus(global.Grav * .75,cusdir+180)
    
    repeat(ceil(random_range(2,7))) {
            with (instance_create(x,y,oBlood)) {
                dir = cusdir /*point_direction(x,y,mouse_x,mouse_y)*/ + random_range(-3,3)
                spd = random_range(4,6)
                hsp = lengthdir_x(spd,dir)
                vsp = lengthdir_y(spd,dir)
                
                image_blend = make_colour_rgb(random_range(90,120),random_range(151,255),79) //181
                
                image_alpha = random_range(.6,1.5)
                if image_alpha &gt; 1 { image_alpha = 1 }
            }
        }
    

//}
vtimerr = 0
} else {
//kill spare vomit
vtimerr ++;
if vtimerr &gt; room_speed * 10 { with (oBlood) { instance_destroy() } vtimerr = 0 }
}



//jumping

if up and place_meeting(x,y + 2,oSolid) { 
    vsp = -JumpSpeed
    jumps -= 1
}

//autojump when you land on something
Stomp = collision_rectangle(x-5,y+1,x+3,y+5,oStompable,true,true)
if instance_exists(Stomp) and vsp &gt; 0
{
    with (Stomp) { HP -= 1 }
    vsp = -JumpSpeed 
}

if App { //this makes sure everything works the same even if time is slowed
    //Gravity yo
    if place_meeting(x,y+2,0) { vsp = 0 } else { vsp += global.Grav }
    
    //Walking and shit
    if !(right and left) {
        if right { if hsp &lt; Speed { hsp += Speed * .2 } }
        if left { if hsp &gt; -Speed { hsp -= Speed * .2 } }
    }
    
    //drag
    if !left and !right {
        if place_meeting(x,y+2,oSolid) {
            hsp = hsp * .6
        } else {
            hsp = hsp *.95
        }
    }
}

//wall sliding
if place_meeting(x+2,y,oSolid) {//and sign(vsp) = 1 {
    if up {
        vsp = -JumpSpeed
        jumps -= 1
        hsp = -Speed * 2
    }
vsp = vsp * .9
}
if place_meeting(x-2,y,oSolid) {//and sign(vsp) = 1 {
    if up {
        vsp = -JumpSpeed
        jumps -= 1
        hsp = Speed * 1.5
    }
vsp = vsp * .9
}

//terminal velocity(s)  (These prevent things from getting too crazy)
if abs(hsp) &gt; 4 { hsp = sign(hsp) * 4 }
if abs(vsp) &gt; 6 { vsp = sign(vsp) * 6 }

//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!
//DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!! DO NOT MODIFY SPEED BELOW THIS LINE!!    

    // Collisions
//Horizontal collisions
if (place_meeting(x+hsp, y, oSolid)) {
    while (!place_meeting(x+sign(hsp),y,oSolid)){
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp * global.time;
//vertical collisions
if (place_meeting(x, y+vsp, oSolid)) {
    while (!place_meeting(x,y+sign(vsp),oSolid)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp * global.time;

        
    //Apply speeds and such
//    
//    x += hsp * global.time
//    y += vsp * global.time

    

//animation stuff

//point me the right direction!
if sign(hsp) != 0 and (right or left) { image_xscale = sign(hsp) }

if hsp &gt; .2 or hsp &lt; -.2
{
    if vsp == 0 //and sprite_index != spr_player_death {
    {
        sprite_index = spr_player_run
    }
} else {
    if vsp == 0 //and sprite_index != spr_player_death
    {
    sprite_index = spr_player_idle
    }
}
if vsp &lt; 0
{
    sprite_index = spr_player_up
}
if vsp &gt; 0 
{
    sprite_index = spr_player_down
}

//health stuff
var spike;
spike = instance_place(x,y,oSpikes)
if instance_exists(spike) { if spike.state != false { HP -= 1 } }

if HP &lt;= 0 {
    repeat(200) {
        with (instance_create(x,y,oBlood)) {
            s = true
            dir = random(360)
            spd = random(5)
            hsp = lengthdir_x(spd,dir)
            vsp = lengthdir_y(spd,dir)
            image_blend = make_colour_rgb(random_range(151,255),80,79) //181
            image_alpha = random_range(.6,1.5)
            if image_alpha &gt; 1 { image_alpha = 1 }
        }
    }
    instance_destroy()
}

if mouse_check_button_pressed( mb_right ) {
    
    with (instance_create(x,y,oHook)) {
    
    //grapple stuff
    
    
    
    
    }
    
}

view_xview[0] = floor(x - view_wview/2)
view_yview[0] = floor(y - view_hview/2)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()
draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha)
if global.debug {
    
    draw_set_colour(c_aqua);
    //vv true center of player
    draw_circle(x-1,y-1,2,true)
    //Bounding box of player
    draw_rectangle(x+3,y+4,x-5,y-6,true)
    
    draw_set_colour(c_orange);
    //stomping on things mask
    draw_rectangle(x-5,y+1,x+3,y+5,true)
}   

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
